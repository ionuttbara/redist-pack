<!--
***********************************************************************************************
Microsoft.VisualJSharp.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process specific for VJ# .NET projects.
For example, it contains the step that actually calls the VJ# compiler.  The remainder
of the build process is defined in Microsoft.Common.targets, which is imported by 
this file.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <UsingTask TaskName="Vjc" AssemblyName="Microsoft.Build.VisualJSharp, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
    <UsingTask TaskName="VjsResGen" AssemblyName="Microsoft.Build.VisualJSharp, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
    <UsingTask TaskName="CreateJSharpManifestResourceName" AssemblyName="Microsoft.Build.VisualJSharp, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>

    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildBinPath)\Microsoft.VisualJSharp.targets</MSBuildAllProjects>
        <DefaultLanguageSourceExtension>.jsl</DefaultLanguageSourceExtension>
        <Language>VJ#</Language>
    </PropertyGroup>

    <!-- 
    The CreateManifestResourceNames target create the manifest resource names from the .RESX 
    files.

        [IN]
        @(ResxWithNoCulture) - The names the non-culture .RESX files.
        @(ResxWithCulture) - The names the culture .RESX files.
        @(NonResxWithNoCulture) - The names of the non-culture non-RESX files (like bitmaps, etc).        
        @(NonResxWithCulture) - The names of the culture non-RESX files (like bitmaps, etc).        

        [OUT]    
        @(ManifestResourceWithNoCultureName) - The corresponding manifest resource name (.RESOURCE)
        @(ManifestResourceWithCultureName) - The corresponding manifest resource name (.RESOURCE)
        @(ManifestNonResxWithNoCulture) - The corresponding manifest resource name.        
        @(ManifestNonResxWithCulture) - The corresponding manifest resource name.        
    
    For J# applications the transformation is like:
    
        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly    
        
    For other project systems, this transformation may be different.  
    -->     
    <PropertyGroup>
        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
    </PropertyGroup>
    <Target 
        Name="CreateManifestResourceNames" 
        Condition="'@(ResxWithNoCulture)@(ResxWithCulture)@(NonResxWithNoCulture)@(NonResxWithCulture)'!=''"
        DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

        <!-- Create the target resource names for non-culture resx files. -->         
        <CreateJSharpManifestResourceName Condition="'@(ResxWithNoCulture)'!=''"
              ResourceFiles="@(ResxWithNoCulture)"
              RootNamespace="$(RootNamespace)">

            <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithNoCultureName"/>

        </CreateJSharpManifestResourceName>

        <!-- Create the target resource names for culture resx files. -->
        <CreateJSharpManifestResourceName Condition="'@(ResxWithCulture)'!=''"
              ResourceFiles="@(ResxWithCulture)"
              RootNamespace="$(RootNamespace)">
              
            <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithCultureName"/>

        </CreateJSharpManifestResourceName>

        <!-- Create the target resource names for non-culture non-resx files. -->         
        <CreateJSharpManifestResourceName Condition="'@(NonResxWithNoCulture)'!=''"
              ResourceFiles="@(NonResxWithNoCulture)"
              RootNamespace="$(RootNamespace)">
              
            <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithNoCulture"/>

        </CreateJSharpManifestResourceName>

        <!-- Create the target resource names for culture non-resx files. -->
        <CreateJSharpManifestResourceName Condition="'@(NonResxWithCulture)'!=''"
              ResourceFiles="@(NonResxWithCulture)"
              RootNamespace="$(RootNamespace)">
              
            <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithCulture"/>

        </CreateJSharpManifestResourceName>
    </Target>

    <PropertyGroup>

        <!-- "None" is not technically a valid DebugType, so we can't pass it in as such
             to the compiler.  So here, we modify the properties so they make sense. -->
        <DebugSymbols Condition=" '$(DebugType)' == 'none' ">false</DebugSymbols>
        <DebugType    Condition=" '$(DebugType)' == 'none' "></DebugType>    
        
        <!-- Provide a facility to override UseHostCompilerIfAvailable-->
        <UseHostCompilerIfAvailable Condition=" '$(UseHostCompilerIfAvailable)' == ''">true</UseHostCompilerIfAvailable>

        <!-- If we're building from inside VisualStudio, we want to always run the Compile target,
             so that the IDE's compilers have a chance to compile even if MSBuild thinks that the
             outputs on disk are up-to-date.  This is because in the IDE, one does not have to save
             the source files in the editors to disk before building.  This trick forces the Compile
             target to always run when inside the IDE. -->
        <NonExistentFile Condition=" '$(BuildingInsideVisualStudio)' == 'true' and '$(UseHostCompilerIfAvailable)' == 'true' ">__NonExistentSubDir__\__NonExistentFile__</NonExistentFile>
    </PropertyGroup>

    <ItemGroup>
        <DocFileItem Include="$(DocumentationFile)" Condition="'$(DocumentationFile)'!=''"/>
    </ItemGroup>

    <PropertyGroup>
        <CoreCompileDependsOn></CoreCompileDependsOn>
    </PropertyGroup>
    <Target
        Name="CoreCompile"
        Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(ManifestResourceWithNoCulture);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ManifestNonResxWithNoCultureOnDisk);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(EmbeddedDocumentation);                
                @(CustomAdditionalCompileInputs)"
        Outputs="@(DocFileItem);
                 @(IntermediateAssembly);
                 $(NonExistentFile);
                 @(CustomAdditionalCompileOutputs)"
        DependsOnTargets="$(CoreCompileDependsOn)"
    >
        <Vjc
              AdditionalLibPaths="$(AdditionalLibPaths)"
              BaseAddress="$(BaseAddress)"
              CodePage="$(CodePage)"
              DebugType="$(DebugType)"
              DefineConstants="$(DefineConstants)"
              DelaySign="$(DelaySign)"
              DisabledWarnings="$(NoWarn)"
              DisableExtensions="$(DisableLangXtns)" 
              DocumentationFile="@(DocFileItem)"
              EmitDebugInformation="$(DebugSymbols)"
              KeyContainer="$(KeyContainerName)"
              KeyFile="$(KeyOriginatorFile)"
              Jcpa="$(JCPA)"
              LinkResources="$(LinkResource)"
              MainEntryPoint="$(StartupObject)"
              NoLogo="$(NoLogo)"
              Optimize="$(Optimize)"
              OutputAssembly="@(IntermediateAssembly)"
              Platform="$(PlatformTarget)"
              References="@(ReferencePath)"
              Resources="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
              ResponseFiles="$(CompilerResponseFile)"
              SecureScoping="$(SecureScoping)"
              Sources="@(Compile)"
              TargetType="$(OutputType)"
              ToolPath="$(VjcToolPath)"
              TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
              Utf8Output="$(Utf8Output)"
              WarningLevel="$(WarningLevel)"
              Win32Icon="$(ApplicationIcon)"
              Win32Resource="$(Win32Resource)"
              />

    </Target>

    <Import Project="Microsoft.Common.targets" />

</Project>
